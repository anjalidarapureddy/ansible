. launch an ubuntu instance
      become a root user- sudo -i
      install packages-  apt update -y
. install mysql into the server
      sudo apt install mysql-server
      check the status- sudo service mysql status
      network status of the network- sudo ss -tap | grep mysql
. configure MYSQL
      cd /etc/mysql/mysql.conf.d
      vim mysqld.cnf 
      change the bindaddress as ur network ip/ 0.0.0.0
      daemon will be restarted-  sudo systemctl restart mysql.service
. Login to the sql 
      mysql -u root -p
      create a database- create database <name>;
      use <name>;
      create table <tablename> ( column1 datatype, column2 d.t2, column3 d.t3);
      insert into <tablename> values (value of column1, val of col2, val of col3);
      exit
      for mysqldump-  mysqldump --all-databases --routines -u root -p > ~/fulldump.sql
      backup-  sudo rsync -avz /etc/mysql /root/mysql-backup
      sudo rm -rf /var/lib/mysql/*
      sudo mysqld --initialize
      sudo chown -R mysql: /var/lib/mysql
      sudo service mysql start
. install aws-cli and configure
      sudo snap install aws-cli --classic
      aws --version
      aws configure
. create a s3 bucket
. install ansible
      apt install pipx
      apt install ansible-core
      ansible --version
      create a passwd for vault-  openssl rand -base64 2048 > vault.pass
      ansible-vault create group_vars/all/pass.yml --vault-password-file vault.pass ---enter the password eg:(password: anjali)
. write a playbook.yaml
      ---
      - name: First playbook
        hosts: localhost
        tasks:
        - name: Take backup
          shell: mysqldump -u root --password="{{mysql_passwd}}" db_name table_name > /tmp/dump3.sql
        - name: Push to s3
          shell: aws s3 cp /tmp/dump3.sql s3://sql-backupfile

      command to run playbook- ansible-playbook playbook.yaml --vault-password-file vault.pass
--------------------------------------------------success--------------------------------------------------------


    




aws storage services
. ELASTIC FILE SYSTEM(EFS)
It is used to share the file to multiple servers by mounting the efs to the servers
. FIRST create virtual servers   one is ubuntu and otherone is amazon linux
. SECOND create a security group and edit inbound rules add rule as NFS to the private ip address for the  both ec2 instances.
. Third Create a efs file as custom and attach the mount using ip address
now open the amazon server in that , we mount the file system to the webserver for that we install httpd , to enable httpd- chkconfig httpd on
and copy the mounting command which is available in efs
And repeat the same procedure in ubuntu server but here we add one more command is sudo apt install nfs-common
and mount the command
Create a file anyone of the server that can be displayed in other connecting servers also.
























      
      
